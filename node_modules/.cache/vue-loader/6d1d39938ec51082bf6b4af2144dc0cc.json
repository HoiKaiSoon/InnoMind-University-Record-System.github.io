{"remainingRequest":"D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\innomind_university_record_system\\src\\views\\dashboard\\index.vue?vue&type=template&id=106c86ed&scoped=true&","dependencies":[{"path":"D:\\innomind_university_record_system\\src\\views\\dashboard\\index.vue","mtime":1711599866764},{"path":"D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1655712169000},{"path":"D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}