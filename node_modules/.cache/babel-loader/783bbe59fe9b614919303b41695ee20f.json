{"remainingRequest":"D:\\innomind_university_record_system\\node_modules\\thread-loader\\dist\\cjs.js!D:\\innomind_university_record_system\\node_modules\\babel-loader\\lib\\index.js!D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\innomind_university_record_system\\src\\views\\emp\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\innomind_university_record_system\\src\\views\\emp\\index.vue","mtime":1723304044918},{"path":"D:\\innomind_university_record_system\\babel.config.js","mtime":1637306514000},{"path":"D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\innomind_university_record_system\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\innomind_university_record_system\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"D:\\innomind_university_record_system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\innomind_university_record_system\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}